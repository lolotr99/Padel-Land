/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.basico;

import controlador.DiasNoDisponiblesController;
import controlador.HorarioController;
import controlador.PistaController;
import controlador.PropertiesController;
import controlador.ReservaController;
import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.mail.MessagingException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import modelo.DiasNoDisponibles;
import modelo.Horarios;
import modelo.Pistas;
import modelo.Properties;
import modelo.Reservas;
import modelo.Usuarios;
import utilidades.Constantes;
import utilidades.ImagenFondo;
import utilidades.Mailer;

/**
 *
 * @author Manolo
 */
public class ReservaForm extends javax.swing.JFrame {

    /**
     * Creates new form ReservaForm
     */
    
    Usuarios user;
    ReservaController reservaController;
    DiasNoDisponiblesController diasNoDisponiblesController;
    HorarioController horarioController;
    PropertiesController propertieController;
    PistaController pistaController;
    ArrayList<Pistas> pistasDisponiblesPorDiaYHora;
    ArrayList<Horarios> listaHorariosConPistasDisponibles;
    List<DiasNoDisponibles> listaDiasNoDisponibles;
    
    public ReservaForm() {
        initComponents();
        reservaController = new ReservaController();
        diasNoDisponiblesController = new  DiasNoDisponiblesController();
        horarioController = new HorarioController();
        propertieController = new PropertiesController();
        pistaController = new PistaController();
        listaDiasNoDisponibles = diasNoDisponiblesController.getListaDias();
        jDateChooserCita.setDate(new Date());
        ponLaAyuda();
    }
    
    public ReservaForm(Usuarios user) {
        initComponents();
        reservaController = new ReservaController();
        diasNoDisponiblesController = new  DiasNoDisponiblesController();
        horarioController = new HorarioController();
        propertieController = new PropertiesController();
        pistaController = new PistaController();
        this.user = user;
        listaDiasNoDisponibles = diasNoDisponiblesController.getListaDias();
        jDateChooserCita.setDate(new Date());
        ponLaAyuda();
    }
    
    public void ponLaAyuda(){
        try{
            //Carga el fichero de ayuda
            File fichero = new File("src/help"+File.separator+"help_set.hs");
            URL hsURL = fichero.toURI().toURL();

            //Carga el HelpSet y el HelpBroker
            HelpSet helpset = new HelpSet(null,hsURL);
            HelpBroker hb = helpset.createHelpBroker();
            
            //Ponemos la ayuda
            hb.enableHelpKey(getRootPane(), "reservas", helpset);
        }catch(IllegalArgumentException | MalformedURLException | HelpSetException ex){
            Logger.getLogger(ReservaForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex,"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Fosrm Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new ImagenFondo();
        jLabel1 = new javax.swing.JLabel();
        jDateChooserCita = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxHorario = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxPistas = new javax.swing.JComboBox<>();
        jButtonReservar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Padel Land - Reservar");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setText("Elige el d√≠a de la cita");

        jDateChooserCita.setDateFormatString("dd/MM/yyyy");
        jDateChooserCita.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooserCitaPropertyChange(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel3.setText("Elige hora de reserva");

        jComboBoxHorario.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxHorarioItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Elige la pista");

        jButtonReservar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/img/icons8-check-mark-40.png"))); // NOI18N
        jButtonReservar.setText("RESERVAR");
        jButtonReservar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReservarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(84, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooserCita, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBoxHorario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxPistas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jButtonReservar, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jDateChooserCita, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxHorario, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxPistas, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jButtonReservar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jDateChooserCitaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooserCitaPropertyChange
        // TODO add your handling code here:
        SimpleDateFormat formatoDia = new SimpleDateFormat("yyyy/MM/dd");
        SimpleDateFormat formatoHora = new SimpleDateFormat("HH:mm");
        String dia = "";
        try{
            if (jDateChooserCita.getDate() != null)
                dia = formatoDia.format(jDateChooserCita.getDate());
            else{
                dia = formatoDia.format(new Date());
            }

            if ("date".equals(evt.getPropertyName())) {
                boolean isDiaSeleccionadoNoDisponible = false;
                for (DiasNoDisponibles diaNoDisponible : listaDiasNoDisponibles){
                    if (formatoDia.format(diaNoDisponible.getDia()).equals(dia)){
                        isDiaSeleccionadoNoDisponible = true;
                        break;
                    }
                }
                String hoy = formatoDia.format(new Date());
                String horaActual = formatoHora.format(new Date());
                if (hoy.equals(dia)){
                    listaHorariosConPistasDisponibles = reservaController.getHorariosQueTenganPistasDisponiblesHoy(dia,horaActual);
                    jComboBoxHorario.removeAllItems();
                    jComboBoxPistas.removeAllItems();
                    if (listaHorariosConPistasDisponibles.size()> 0){
                        for (Horarios horario : listaHorariosConPistasDisponibles) {
                            jComboBoxHorario.addItem(formatoHora.format(horario.getHoraComienzo()));
                        }
                    }else{
                        jComboBoxHorario.addItem("No hay horas disponibles");
                    }

                }else if(jDateChooserCita.getDate().before(new Date())){
                    JOptionPane.showMessageDialog(null,"El d√≠a seleccionado no puede ser anterior a la fecha actual","WARNING",JOptionPane.WARNING_MESSAGE);
                }else if (isDiaSeleccionadoNoDisponible){
                    JOptionPane.showMessageDialog(null,"Padel Land cierra en el d√≠a seleccionado","WARNING",JOptionPane.WARNING_MESSAGE);

                }else{
                    listaHorariosConPistasDisponibles = reservaController.getHorariosQueTenganPistasDisponibles(dia);
                    jComboBoxHorario.removeAllItems();
                    jComboBoxPistas.removeAllItems();
                    if (listaHorariosConPistasDisponibles.size() > 0){
                        for (Horarios horario : listaHorariosConPistasDisponibles) {
                            jComboBoxHorario.addItem(formatoHora.format(horario.getHoraComienzo()));
                        }
                    }else{
                        jComboBoxHorario.addItem("No hay horas disponibles");
                    }

                }
            }
        }catch(HeadlessException ex){
            Logger.getLogger(ReservaForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex,"ERROR",JOptionPane.ERROR_MESSAGE);
        }catch(Exception ex){
            Logger.getLogger(ReservaForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex,"ERROR",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jDateChooserCitaPropertyChange

    private void jComboBoxHorarioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxHorarioItemStateChanged
        // TODO add your handling code here:
        try{
            if (evt.getStateChange() == ItemEvent.SELECTED){
                if (!jComboBoxHorario.getSelectedItem().toString().equals("No hay horas disponibles")){
                    SimpleDateFormat formatoDia = new SimpleDateFormat("yyyy/MM/dd");
                    SimpleDateFormat formatoHora = new SimpleDateFormat("HH:mm");
                    String dia = "";
                    String hora = "";
                    if (jDateChooserCita.getDate() != null)
                        dia = formatoDia.format(jDateChooserCita.getDate());
                    else
                        dia = formatoDia.format(new Date());

                    if (jComboBoxHorario.getSelectedItem() != null) 
                        hora =  jComboBoxHorario.getSelectedItem().toString();
                    else
                        hora = formatoHora.format(new Date());
                    pistasDisponiblesPorDiaYHora = reservaController.getPistasDisponiblesSegunDiayHora(dia, hora);
                    jComboBoxPistas.removeAllItems();
                    for (Pistas pista : pistasDisponiblesPorDiaYHora) {
                        jComboBoxPistas.addItem(pista.getNombrePista());
                    }
                }else{
                    jComboBoxPistas.addItem("No hay pistas disponibles");
                }
        }
        }catch(Exception ex){
            Logger.getLogger(ReservaForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex,"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jComboBoxHorarioItemStateChanged

    private void jButtonReservarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReservarActionPerformed
        // TODO add your handling code here:
        try{
            if (user != null){
                SimpleDateFormat formatoDia = new SimpleDateFormat("yyyy/MM/dd");
                SimpleDateFormat formatoHora = new SimpleDateFormat("HH:mm"); 

                String hoy = formatoDia.format(new Date());
                String hora = formatoHora.format(new Date());

                Properties propertie = propertieController.selectPropertieFromName("LIMITE_RESERVAS_SIMULTANEAS");
                int nReservasSimultaneasUsuario = reservaController.getNumeroReservasSimultaneasUsuario(user.getId(), hoy, hora);
                if (Integer.valueOf(propertie.getValue()) <= nReservasSimultaneasUsuario) {
                    //No se permite la reserva porque ya ha llegado al l√≠mite simultaneo
                    JOptionPane.showMessageDialog(null,"Este usuario ya ha excedido el n√∫mero de reservas simult√°neas ("+propertie.getValue()+"). ¬°Vuelve cuando ya hayas jugado alg√∫n partido!","¬°Noo!",JOptionPane.WARNING_MESSAGE);
                }else{
                    if (verifyCampos()){
                        Date dia = jDateChooserCita.getDate();
                        String horaComienzo =jComboBoxHorario.getSelectedItem().toString();

                        Horarios horario = horarioController.getHorarioByHoraComienzo(horaComienzo);
                        Pistas pista = pistaController.getPistaByNombre(jComboBoxPistas.getSelectedItem().toString());

                        Reservas reserva = new Reservas(horario, pista, user, dia);
                        //Comprobar antes de insertar que esta reserva no existe
                        if (!reservaExists(reserva)){
                            long result = reservaController.insertarReserva(reserva);
                            if (result != 0){
                                Mailer mailer = new Mailer();
                                String diaFormateado = new SimpleDateFormat("dd-MM-yyyy").format(dia);
                                String mensaje = "¬°Hola "+user.getNombreCompleto()+"!\nDesde Padel Land te confirmamos la reserva para el d√≠a "+diaFormateado+" a las "+horario.getHoraComienzo()+ " en la pista "+pista.getNombrePista()+"\n¬°A jugar!";
                                try {
                                    mailer.enviarMail(Constantes.EMAIL_ADMIN, user.getEmail(), "Confirmaci√≥n de reserva", mensaje);
                                } catch (MessagingException ex) {
                                    Logger.getLogger(ReservaForm.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(null,ex,"ERROR",JOptionPane.ERROR_MESSAGE);
                                }
                                dispose();
                                JOptionPane.showMessageDialog(null,"Reserva a√±adida correctamente","INFO",JOptionPane.INFORMATION_MESSAGE);
                                MiPerfilForm form = new MiPerfilForm(user);
                                form.pack();
                                form.setVisible(true);
                                form.setLocationRelativeTo(null);
                                form.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

                            }else{
                                JOptionPane.showMessageDialog(null,"Lo sentimos, ha ocurrido un error","ERROR",JOptionPane.ERROR_MESSAGE);
                            }
                        }else{
                            JOptionPane.showMessageDialog(null,"Esta pista ya est√° alquilada en esa hora para el d√≠a seleccionado","ERROR",JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }else{
                JOptionPane.showMessageDialog(null,"No se puede realizar una reserva si el usuario no est√° logueado","INFO",JOptionPane.INFORMATION_MESSAGE);
            }
        }catch(HeadlessException | NumberFormatException ex){
            Logger.getLogger(ReservaForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex,"ERROR",JOptionPane.ERROR_MESSAGE);
        }catch(Exception ex){
            Logger.getLogger(ReservaForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex,"ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonReservarActionPerformed

    public boolean reservaExists(Reservas reserva) {
        boolean reserva_exists = false;
        
        long idPista = reserva.getPistas().getId();
        long idHorario = reserva.getHorarios().getId();
        String dia = new SimpleDateFormat("yyyy-MM-dd").format(reserva.getDia());
        
        
        if (reservaController.getReserva(idPista, idHorario, dia) != null){
            reserva_exists = true;
        }
        
        return reserva_exists;
    }
    
    public boolean verifyCampos(){
        Date dia = jDateChooserCita.getDate();
        
        boolean horarioSelected = jComboBoxHorario.getItemCount() > 0 && !jComboBoxHorario.getSelectedItem().toString().equals("No hay horas disponibles");
        String horaComienzo = "";
        if (horarioSelected){
            horaComienzo = jComboBoxHorario.getSelectedItem().toString();
        }
        
        boolean pistaSelected = jComboBoxPistas.getItemCount() > 0 && !jComboBoxPistas.getSelectedItem().toString().equals("No hay pistas disponibles");
        String nombrePista = "";
        if (pistaSelected){
            nombrePista = jComboBoxPistas.getSelectedItem().toString();
        }
        if (dia != null && !horaComienzo.trim().equals("") && !nombrePista.trim().equals(""))
            return true;
        else{
            JOptionPane.showMessageDialog(null, "No hay pistas disponibles este d√≠a","Campos vac√≠os",JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReservaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReservaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReservaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReservaForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReservaForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonReservar;
    private javax.swing.JComboBox<String> jComboBoxHorario;
    private javax.swing.JComboBox<String> jComboBoxPistas;
    private com.toedter.calendar.JDateChooser jDateChooserCita;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
